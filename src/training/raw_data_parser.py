

class RawDataParser:
    """
        The task of this class is to convert raw games history generated by the
        cpp scipt into LLM friendly format that could be utilized for training.
    """

    def __init__(self, delimeter: str, path_to_raw_data: str):
        self.games = self.load_raw_data(delimeter, path_to_raw_data)

        # print(self.games[1])
    
    def load_raw_data(self, delimeter: str, path_to_raw_data: str):
        
        games = []

        with open(path_to_raw_data, 'r') as file:
            lines = file.readlines()

        

        i = 0
        current_game = None
        while i < len(lines):
            
            line = lines[i].strip()

            # beginning of a new game
            if line.startswith(delimeter):
                if current_game != None:
                    games.append(current_game)

                current_game = {
                    "turns": 0,
                    "snakes": [],
                    "apples": []
                }

                i += 1
                continue

            if line.startswith("Turns"):
                current_game['turns'] = int(line.split()[1])
                i+=1
                continue

            # Parse snake information
            if line.startswith('Length:'):
                # snake_length = int(line.split()[1])
                # skip length
                i += 1
                snake_id = int(lines[i].strip().split()[1])
                i += 1
                
                # Parse snake positions
                positions_line = lines[i].strip()
                positions = []
                position_pairs = positions_line.split(') (')
                
                for pair in position_pairs:
                    # Clean up the pairs
                    pair = pair.replace('(', '').replace(')', '')
                    x, y = map(int, pair.split(','))
                    positions.append((x, y))

                # go to tail lengths
                i += 2
                # print(lines[i].split())
                tail_lengths = [int(l) for l in lines[i].split()]
                
                snake_data = {
                    'id': snake_id,
                    'positions': positions,
                    'tail_lengths': tail_lengths
                }
                
                current_game['snakes'].append(snake_data)
                i += 1
                continue

            # Parse apple information
            if line.startswith("Apple"):
                apple_data = []

                i += 1 # move to the next line
                
                while i < len(lines) and not lines[i].strip().startswith(delimeter):
                    line = lines[i].strip()
                    if not line:
                        i += 1
                        continue
                    
                    # Check if we've reached a new section
                    if line.startswith('Length:') or line.startswith('Turns'):
                        break
                    
                    parts = line.split()
                    
                    # Extract apple positions and turn number
                    apple_positions = []
                    for j in range(len(parts) - 1):
                        if '(' in parts[j]:
                            apple_pos = parts[j].replace('(', '').replace(')', '').split(',')
                            apple_positions.append((int(apple_pos[0]), int(apple_pos[1])))
                    
                    turn = int(parts[-1])
                    
                    apple_data.append({
                        'positions': apple_positions,
                        'turn': turn
                    })
                    
                    i += 1
                
                current_game['apples'] = apple_data
                continue
            
            i += 1

        return games




    def parse_position(self):
        """
            Creates a corpora like:
            AijAklAmn S0 [snake 0 head position] [snake length] AijAklAmn S1 [snake 1 head position] [snake length] AijAklAmn
        """
        game = self.games[0]

        # print(game)

        TURNS = game["turns"]
        SNAKES = game["snakes"]
        APPLES = game["apples"]

        corpora = []
        corp_line = ""

        # we need to have indices this way, since some turns are just skip turns
        # we don't save apples or snake positions in them
        # list of current index for position in a given snake
        si = [0 for _ in range(len(SNAKES))]
        
        # add initial apple postion
        apple_i = 0
        corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
        corp_line += " "

        for turn in range(TURNS):
            
            # 0th snake if move exists
            if turn % 2 == 0 and si[0] < len(SNAKES[0]["positions"]):
                # S0 12 7 -> Snake0 is on position (1,2) and has a tail of length 7
                corp_line += f'S0 {SNAKES[0]["positions"][si[0]][0]} {SNAKES[0]["positions"][si[0]][1]} {SNAKES[0]["tail_lengths"][si[0]]} '
                # after a move save apple position
                if apple_i < len(APPLES):
                    corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
                    # corp_line += " "
                    apple_i += 1

                si[0] += 1
            # 1st snake if move exists
            elif turn % 2 == 1 and  si[1] < len(SNAKES[1]["positions"]):
                # S1 12 7 -> Snake1 is on position (1,2) and has a tail of length 7
                corp_line += f'S1 {SNAKES[1]["positions"][si[1]][1]} {SNAKES[1]["positions"][si[1]][1]} {SNAKES[1]["tail_lengths"][si[1]]} '

                # after a move save apple position
                if apple_i < len(APPLES):
                    corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
                    # corp_line += " "
                    apple_i += 1
                    

                si[1] += 1
            
            corp_line += " "

        corpora.append(corp_line.strip())

        print("turns:", TURNS)
        print("moves", len(SNAKES[0]["positions"] + SNAKES[1]["positions"]))
        print("apples:", len(APPLES))
        print(corpora)






if __name__ == "__main__":
    parser = RawDataParser("==================================================", "/Users/szymon/Documents/Bachelor-Thesis/src/training/raw_state_history.txt")

    parser.parse_position()