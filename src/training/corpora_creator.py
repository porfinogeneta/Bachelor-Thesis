from typing import List
import numpy as np
import matplotlib.pyplot as plt

class CorporaCreator:
    """
        The task of this class is to convert raw games history generated by the
        cpp scipt into LLM friendly format that could be utilized for training.
    """

    def __init__(self):
        pass
        # print(self.games[1])
    
    def load_raw_data(self, delimeter: str, path_to_raw_data: str):

       
        games = []

        with open(path_to_raw_data, 'r') as file:
            lines = file.readlines()

        

        i = 0
        current_game = None
        while i < len(lines):
            
            line = lines[i].strip()

            # beginning of a new game
            if line.startswith(delimeter):
                if current_game != None:
                    games.append(current_game)

                current_game = {
                    "turns": 0,
                    "snakes": [],
                    "apples": []
                }

                i += 1
                continue

            if line.startswith("Turns"):
                current_game['turns'] = int(line.split()[1])
                i+=1
                continue

            # Parse snake information
            if line.startswith('Length:'):
                # snake_length = int(line.split()[1])
                # skip length
                i += 1
                snake_id = int(lines[i].strip().split()[1])
                i += 1
                
                # Parse snake positions
                positions_line = lines[i].strip()
                positions = []
                position_pairs = positions_line.split(') (')
                
                for pair in position_pairs:
                    # Clean up the pairs
                    pair = pair.replace('(', '').replace(')', '')
                    x, y = map(int, pair.split(','))
                    positions.append((x, y))

                # go to tail lengths
                i += 2
                # print(lines[i].split())
                tail_lengths = [int(l) for l in lines[i].split()]
                
                snake_data = {
                    'id': snake_id,
                    'positions': positions,
                    'tail_lengths': tail_lengths
                }
                
                current_game['snakes'].append(snake_data)
                i += 1
                continue

            # Parse apple information
            if line.startswith("Apple"):
                apple_data = []

                i += 1 # move to the next line
                
                while i < len(lines) and not lines[i].strip().startswith(delimeter):
                    line = lines[i].strip()
                    if not line:
                        i += 1
                        continue
                    
                    # Check if we've reached a new section
                    if line.startswith('Length:') or line.startswith('Turns'):
                        break
                    
                    parts = line.split()
                    
                    # Extract apple positions and turn number
                    apple_positions = []
                    for j in range(len(parts) - 1):
                        if '(' in parts[j]:
                            apple_pos = parts[j].replace('(', '').replace(')', '').split(',')
                            apple_positions.append((int(apple_pos[0]), int(apple_pos[1])))
                    
                    turn = int(parts[-1])
                    
                    apple_data.append({
                        'positions': apple_positions,
                        'turn': turn
                    })
                    
                    i += 1
                
                current_game['apples'] = apple_data
                continue
            
            i += 1

        return games


    def get_statistics(self, corpora_folder: str, stats_of_filename: str):

        games = []
        # each game is written in a separate line
        corpora_path = corpora_folder + stats_of_filename
        with open(corpora_path, 'r') as file:
            [games.append(line) for line in file]
        
        # remove any empty games that might result from splitting
        games = [game.strip() for game in games if game.strip()]

        # calcualte tokens amount, tokenization is on split
        token_counts = [len(game.split()) for game in games]
        
        # Calculate statistics
        stats = {
            "total_games": len(games),
            "token-wize": {
                "min": min(token_counts),
                "max": max(token_counts),
                "mean": np.mean(token_counts),
                "median": np.median(token_counts),
                "p90": np.percentile(token_counts, 90),
            }
        }
        
        # Create histograms
        fig, ax1 = plt.subplots(1, 1, figsize=(15, 5))
        
        
        # Tokens histogram
        ax1.hist(token_counts, bins=30, alpha=0.7, color='green')
        ax1.set_title('Game Length Distribution (by tokens)')
        ax1.set_xlabel('Number of Tokens')
        ax1.set_ylabel('Frequency')
        ax1.axvline(stats["token-wize"]["median"], color='r', linestyle='dashed', linewidth=1, label=f'Median: {stats["token-wize"]["median"]:.1f}')
        ax1.axvline(stats["token-wize"]["p90"], color='g', linestyle='dashed', linewidth=1, label=f'90th %: {stats["token-wize"]["p90"]:.1f}')
        ax1.legend()
        
        plt.tight_layout()
        plt.savefig(corpora_folder + f'{stats_of_filename}_game_length_distr.png')
        plt.show()


        stats_file = f"{stats_of_filename}_stats.txt"
        with open(corpora_folder + stats_file, 'w') as file:
            token_stats = stats['token-wize']
            file.write(f"Total Games: {stats['total_games']}\n"
                    f"Max Game Length: {token_stats['max']}\n"
                    f"Min Game Length: {token_stats['min']}\n"
                    f"Average Game Length: {token_stats['mean']}\n"
                    f"Median Game Length: {token_stats['median']}\n"
                    f"90th percentile: {token_stats['p90']}\n")
    
    def create_standard_position_corpora(self, delimeter: str, path_to_raw_data: str, output_filename: str, output_folder: str):
        """
            Creates a corpora like:
        """

        self.games = self.load_raw_data(delimeter, path_to_raw_data)
        self.output_folder = output_folder

        


        corpora = []
        for game in self.games:

            TURNS = game["turns"]
            SNAKES = game["snakes"]
            APPLES = game["apples"]

            
            corp_line = "<START> "


            # THIS INITIAL CONFIGURATION OCCURES IN THE Oth TURN (so odd turns are Snake0 moves)

            # since snake history and and apple history begins with inital apples postions and initial
            # snake heads postitions, first tokens are the initial state, apple tokens are apples after each move
            # so initial state looks something like this:
            # [Snake0_positions[0]] [apples_positions[0]] [Snake1_positions[1]] [apples_positions[0]] [normal game with move and apples state after each move]

            # we need to have indices this way, since some turns are just skip turns
            # we don't save apples or snake positions in them
            # list of current index for position in a given snake
            si = [1 for _ in range(len(SNAKES))]
            
            # set up initial snakes and apples positions
            apple_i = 0
            
            # [Snake0_positions[0]]
            corp_line += f'S0 R{SNAKES[0]["positions"][0][0]}C{SNAKES[0]["positions"][0][1]} L{SNAKES[0]["tail_lengths"][0]} '
            # [apples_positions[0]]
            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
            corp_line += " "

         
            # [Snake1_positions[1]]
            corp_line += f'S1 R{SNAKES[1]["positions"][0][0]}C{SNAKES[1]["positions"][0][1]} L{SNAKES[1]["tail_lengths"][0]} '
            # [apples_positions[0]]
            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
            corp_line += " "

            apple_i = 1

            # TURNS + 1 since last turn is also imporant (has a move that resulted in death of the other snake)
            for turn in range(1, TURNS+1):
                
                # 0th snake if move exists
                if (turn-1) % 2 == 0:
                    if si[0] < len(SNAKES[0]["positions"]):
                        # S0 12 7 -> Snake0 is on position (1,2) and has a tail of length 7
                        corp_line += f'S0 R{SNAKES[0]["positions"][si[0]][0]}C{SNAKES[0]["positions"][si[0]][1]} L{SNAKES[0]["tail_lengths"][si[0]]} '
                        # after a move save apple position
                        if apple_i < len(APPLES):
                            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
                            # corp_line += " "
                            apple_i += 1

                        si[0] += 1
                    else:
                        corp_line += f'S0 <DEAD> L{SNAKES[0]["tail_lengths"][-1]} '
                        corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i-1]["positions"]])

                # 1st snake if move exists
                elif (turn-1) % 2 == 1:
                    if si[1] < len(SNAKES[1]["positions"]):
                        # S1 12 7 -> Snake1 is on position (1,2) and has a tail of length 7
                        corp_line += f'S1 R{SNAKES[1]["positions"][si[1]][0]}C{SNAKES[1]["positions"][si[1]][1]} L{SNAKES[1]["tail_lengths"][si[1]]} '

                        # after a move save apple position
                        if apple_i < len(APPLES):
                            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
                            # corp_line += " "
                            apple_i += 1
                            

                        si[1] += 1
                    else:
                        corp_line += f'S1 <DEAD> L{SNAKES[1]["tail_lengths"][-1]} '
                        corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i-1]["positions"]])
                
                corp_line += " "

            corpora.append(corp_line.strip() + ' <END> <ENDGAME>\n')

        # clear the file and add data
        with open(self.output_folder + output_filename, 'w') as file:
            for game_line in corpora:
                file.write(game_line) 


if __name__ == "__main__":
    creator = CorporaCreator()

    # creator.create_standard_position_corpora("==================================================",
    #                         "/Users/szymon/Documents/Bachelor-Thesis/src/training/corpora/raw/raw_state_history20kp.txt",
    #                         "standard_positions20kp.txt",
    #                         "/Users/szymon/Documents/Bachelor-Thesis/src/training/corpora/standard_positions/")
    
    creator.get_statistics(corpora_folder="/Users/szymon/Documents/Bachelor-Thesis/src/training/corpora/standard_positions/", stats_of_filename="standard_positions20kp.txt")

