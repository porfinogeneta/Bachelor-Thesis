
class CorporaCreator:
    """
        The task of this class is to convert raw games history generated by the
        cpp scipt into LLM friendly format that could be utilized for training.
    """

    def __init__(self, delimeter: str, path_to_raw_data: str, output_path: str):
        self.games = self.load_raw_data(delimeter, path_to_raw_data)
        self.output_path = output_path

        # print(self.games[1])
    
    def load_raw_data(self, delimeter: str, path_to_raw_data: str):
        
        games = []

        with open(path_to_raw_data, 'r') as file:
            lines = file.readlines()

        

        i = 0
        current_game = None
        while i < len(lines):
            
            line = lines[i].strip()

            # beginning of a new game
            if line.startswith(delimeter):
                if current_game != None:
                    games.append(current_game)

                current_game = {
                    "turns": 0,
                    "snakes": [],
                    "apples": []
                }

                i += 1
                continue

            if line.startswith("Turns"):
                current_game['turns'] = int(line.split()[1])
                i+=1
                continue

            # Parse snake information
            if line.startswith('Length:'):
                # snake_length = int(line.split()[1])
                # skip length
                i += 1
                snake_id = int(lines[i].strip().split()[1])
                i += 1
                
                # Parse snake positions
                positions_line = lines[i].strip()
                positions = []
                position_pairs = positions_line.split(') (')
                
                for pair in position_pairs:
                    # Clean up the pairs
                    pair = pair.replace('(', '').replace(')', '')
                    x, y = map(int, pair.split(','))
                    positions.append((x, y))

                # go to tail lengths
                i += 2
                # print(lines[i].split())
                tail_lengths = [int(l) for l in lines[i].split()]
                
                snake_data = {
                    'id': snake_id,
                    'positions': positions,
                    'tail_lengths': tail_lengths
                }
                
                current_game['snakes'].append(snake_data)
                i += 1
                continue

            # Parse apple information
            if line.startswith("Apple"):
                apple_data = []

                i += 1 # move to the next line
                
                while i < len(lines) and not lines[i].strip().startswith(delimeter):
                    line = lines[i].strip()
                    if not line:
                        i += 1
                        continue
                    
                    # Check if we've reached a new section
                    if line.startswith('Length:') or line.startswith('Turns'):
                        break
                    
                    parts = line.split()
                    
                    # Extract apple positions and turn number
                    apple_positions = []
                    for j in range(len(parts) - 1):
                        if '(' in parts[j]:
                            apple_pos = parts[j].replace('(', '').replace(')', '').split(',')
                            apple_positions.append((int(apple_pos[0]), int(apple_pos[1])))
                    
                    turn = int(parts[-1])
                    
                    apple_data.append({
                        'positions': apple_positions,
                        'turn': turn
                    })
                    
                    i += 1
                
                current_game['apples'] = apple_data
                continue
            
            i += 1

        return games




    def parse_position(self):
        """
            Creates a corpora like:
        """
        corpora = []
        for game in self.games:

            TURNS = game["turns"]
            SNAKES = game["snakes"]
            APPLES = game["apples"]

            
            corp_line = "<START> "


            # THIS INITIAL CONFIGURATION OCCURES IN THE Oth TURN (so odd turns are Snake0 moves)

            # since snake history and and apple history begins with inital apples postions and initial
            # snake heads postitions, first tokens are the initial state, apple tokens are apples after each move
            # so initial state looks something like this:
            # [Snake0_positions[0]] [apples_positions[0]] [Snake1_positions[1]] [apples_positions[0]] [normal game with move and apples state after each move]

            # we need to have indices this way, since some turns are just skip turns
            # we don't save apples or snake positions in them
            # list of current index for position in a given snake
            si = [1 for _ in range(len(SNAKES))]
            
            # set up initial snakes and apples positions
            apple_i = 0
            
            # [Snake0_positions[0]]
            corp_line += f'S0 R{SNAKES[0]["positions"][0][0]}C{SNAKES[0]["positions"][0][1]} L{SNAKES[0]["tail_lengths"][0]} '
            # [apples_positions[0]]
            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
            corp_line += " "

         
            # [Snake1_positions[1]]
            corp_line += f'S1 R{SNAKES[1]["positions"][0][0]}C{SNAKES[1]["positions"][0][1]} L{SNAKES[1]["tail_lengths"][0]} '
            # [apples_positions[0]]
            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
            corp_line += " "

            apple_i += 1

            # TURNS + 1 since last turn is also imporant (has a move that resulted in death of the other snake)
            for turn in range(1, TURNS+1):
                
                # 0th snake if move exists
                if (turn-1) % 2 == 0:
                    if si[0] < len(SNAKES[0]["positions"]):
                        # S0 12 7 -> Snake0 is on position (1,2) and has a tail of length 7
                        corp_line += f'S0 R{SNAKES[0]["positions"][si[0]][0]}C{SNAKES[0]["positions"][si[0]][1]} L{SNAKES[0]["tail_lengths"][si[0]]} '
                        # after a move save apple position
                        if apple_i < len(APPLES):
                            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
                            # corp_line += " "
                            apple_i += 1

                        si[0] += 1
                    else:
                        corp_line += f'S0 <DEAD>'
                # 1st snake if move exists
                elif (turn-1) % 2 == 1:
                    if si[1] < len(SNAKES[1]["positions"]):
                        # S1 12 7 -> Snake1 is on position (1,2) and has a tail of length 7
                        corp_line += f'S1 R{SNAKES[1]["positions"][si[1]][0]}C{SNAKES[1]["positions"][si[1]][1]} L{SNAKES[1]["tail_lengths"][si[1]]} '

                        # after a move save apple position
                        if apple_i < len(APPLES):
                            corp_line += " ".join([f'A{r}{c}' for r,c in APPLES[apple_i]["positions"]])
                            # corp_line += " "
                            apple_i += 1
                            

                        si[1] += 1
                    else:
                        corp_line += f'S1 <DEAD>'
                
                corp_line += " "

            corpora.append(corp_line.strip() + ' <END> <ENDGAME>\n')

        # print(len(corpora))
        with open(self.output_path, 'w') as file:
            for game_line in corpora:
                file.write(game_line) 
        # print("turns:", TURNS)
        # print("moves", len(SNAKES[0]["positions"] + SNAKES[1]["positions"]))
        # print("apples:", len(APPLES))
        # print(corpora)






if __name__ == "__main__":
    creator = CorporaCreator("==================================================",
                            "/Users/szymon/Documents/Bachelor-Thesis/src/training/corpora/raw/raw_state_history20k.txt",
                            "/Users/szymon/Documents/Bachelor-Thesis/src/training/corpora/standard_positions/standard_positions20k.txt"
                            )

    creator.parse_position()